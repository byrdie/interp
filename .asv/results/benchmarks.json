{
    "find_indices.time_find_indices_1d": {
        "code": "def time_find_indices_1d(num: int, method: str):\n    regridding.find_indices(\n        coordinates_input=coordinates_input,\n        coordinates_output=coordinates_output,\n        method=method,\n    )\n\ndef setup_find_indices_1d(num: int, method: str):\n    global coordinates_input\n    global coordinates_output\n    coordinates_input = (np.linspace(-1, 1, num=num),)\n    coordinates_output = (np.linspace(-1.1, 1.1, num=num),)\n    regridding.find_indices(\n        coordinates_input=coordinates_input,\n        coordinates_output=coordinates_output,\n        method=method,\n    )",
        "min_run_count": 2,
        "name": "find_indices.time_find_indices_1d",
        "number": 0,
        "param_names": [
            "num",
            "method"
        ],
        "params": [
            [
                "1000",
                "2000",
                "3000",
                "4000",
                "5000",
                "6000",
                "7000",
                "8000",
                "9000",
                "10000"
            ],
            [
                "'brute'",
                "'searchsorted'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "type": "time",
        "unit": "seconds",
        "version": "a6908d163df36ad199e2e8ec279b161a73fb1b38d82c9f5db8517710c26e3fb8",
        "warmup_time": -1
    },
    "regrid.time_regrid_2d": {
        "code": "def time_regrid_2d(\n    num: int,\n    method: str,\n):\n    regridding.regrid(\n        coordinates_input=coordinates_input,\n        coordinates_output=coordinates_output,\n        values_input=values_input,\n        method=method,\n    )\n\ndef setup_regrid_2d(\n    num: int,\n    method: str,\n):\n    num_x = num_y = num\n\n    x = np.linspace(-1, 1, num=num_x)\n    y = np.linspace(-1, 1, num=num_y)\n    x, y = np.meshgrid(x, y, indexing=\"ij\")\n\n    angle = 0.4\n    x_input = x * np.cos(angle) - y * np.sin(angle) + 0.05 * x * x\n    y_input = x * np.sin(angle) + y * np.cos(angle) + 0.05 * y * y\n\n    x_output = np.linspace(x_input.min(), x_input.max(), num=num_x)\n    y_output = np.linspace(y_input.min(), y_input.max(), num=num_y)\n    x_output, y_output = np.meshgrid(x_output, y_output, indexing=\"ij\")\n\n    global coordinates_input\n    global coordinates_output\n    global values_input\n\n    coordinates_input = (x_input, y_input)\n    coordinates_output = (x_output, y_output)\n    values_input = np.random.uniform(0, 1, size=(num_x - 1, num_y - 1))\n\n    regridding.regrid(\n        coordinates_input=coordinates_input,\n        coordinates_output=coordinates_output,\n        values_input=values_input,\n        method=method,\n    )",
        "min_run_count": 2,
        "name": "regrid.time_regrid_2d",
        "number": 0,
        "param_names": [
            "number of edges per axis",
            "method"
        ],
        "params": [
            [
                "100",
                "200",
                "300",
                "400",
                "500"
            ],
            [
                "'conservative'"
            ]
        ],
        "repeat": 0,
        "rounds": 2,
        "sample_time": 0.01,
        "timeout": 480,
        "type": "time",
        "unit": "seconds",
        "version": "b98eb7e48189988ba1defde5ab4ec2b79cd2db1f87c1e6237a81cf4ec645914f",
        "warmup_time": -1
    },
    "version": 2
}